---
export interface Props {
  image: string | undefined;
}

const { image } = Astro.props;
import pkg from "extract-colors";
const { extractColors } = pkg;
const colors = !image ? null : await extractColors(`./public${image}`);
const hexToCssHsl = (hex: string) => {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)!;
  let r = parseInt(result?.[1] ?? "0", 16) ?? 0;
  let g = parseInt(result?.[2] ?? "0", 16) ?? 0;
  let b = parseInt(result?.[3] ?? "0", 16) ?? 0;
  (r /= 255), (g /= 255), (b /= 255);
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h = 0;
  let s = 0;
  let l = (max + min) / 2;
  if (max == min) {
    h = s = 0; // achromatic
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }

  h = Math.round(h * 360);
  s = Math.round(s * 100);
  l = Math.round(l * 100);
  return { h, s, l };
};
const c1 = colors ? hexToCssHsl(colors?.[0]?.hex ?? "#000000").h : null;
---

{
  image && (
    <div class="hero-image" data-color={c1}>
      <img src={image} alt="" />
    </div>
  )
}
